@page "/coursebrowser"
@using ASPNET_BLAZOR.data
@using ASPNET_BLAZOR.Entities
@using Microsoft.EntityFrameworkCore
@inject MyDbContext Context
@rendermode InteractiveServer

<PageTitle>Course Browser</PageTitle>
<h1>Course Browser</h1>
<p>View students and their grades for a course</p>
<div class="row">
    <div id="left" class="col-md-6 border">

        @foreach (var course in _courses)
        {
            <div style="padding: 3px 3px">
                <button class="btn btn-primary " @onclick="() => LoadStudents(course)">
                    @course.CourseName
                </button>
            </div>
        }

    </div>
    <div id="right" class="col-md-6 border">
        @if (_displayedCourse != null)
        {
            <p>Course Name: @_displayedCourse.CourseName</p>
            <p>Course Code: @_displayedCourse.CourseCode</p>
            <p>Teacher: @_displayedCourse.Teacher</p>
            <p>Semester: @_displayedCourse.Semester</p>
            <div class="table-responsive" style="height: 70vh; overflow-y: auto;">
                <table class="table table-bordered table-striped">
                    <thead class="thead-dark">
                    <tr>
                        <th>Student Name</th><th>Grade</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var grade in _grades)
                    {
                        <tr>
                            <td>@grade.Student.Name</td><td>@grade.GradeValue</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@code {
    private List<Course> _courses = [];
    private List<Grade> _grades = [];

    private Course? _displayedCourse;

    protected override async Task OnInitializedAsync()
    {
        await LoadCourses();
    }

    private async Task LoadCourses()
    {
        _courses = await Context.Courses.ToListAsync();
    }

    private async Task LoadStudents(Course course)
    {
        _displayedCourse = course;
        _grades = await Context.Grades.Where(g => g.Course == course).Include(g => g.Student).ToListAsync();
    }

}